generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Permission{
  id            String    @default(cuid()) @id
  name          String
  guardName     String    @default("web")
  status        Boolean   @default(false)
  role          Role?      @relation(fields: [roleId], references: [id])
  roleId        String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model Role{
  id            String   @default(cuid()) @id
  name          String
  guardName     String  @default("web")
  userHasRole   UserHasRole[]
  permission    Permission[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model UserHasRole{
  id            String   @default(cuid()) @id
  startingDate  DateTime
  endDate       DateTime
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  role          Role     @relation(fields: [roleId], references: [id])
  roleId        String
}
 
model User {
  id            String   @default(cuid()) @id
  firstname     String
  lastname      String
  regNo         String?   @unique
  email         String   @unique
  password      String
  phoneNo       String?   @unique
  fic           FIC       @relation(fields: [ficId], references: [id])
  ficId         String
  booking       Booking[]
  userHasRole   UserHasRole[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map("user")
}

model FIC {
  id            String   @default(cuid()) @id
  name          String   
  users         User[]
  rooms         Room[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model Building {
  id            String     @default(cuid()) @id
  name          String
  address       String?
  published     Boolean @default(false)
  image         String?
  room          Room[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map("building")
}

model Room{
  id            String     @default(cuid()) @id
  buildingId    String
  building      Building   @relation(fields: [buildingId], references: [id])
  name          String
  roomType      String     @default("classroom")
  quota         Int
  status        Status     @default(Available)
  booking       Booking[]
  fics          FIC[]
  disable_date_from  String
  disable_date_to    String
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model Booking{
  id            String      @default(cuid()) @id
  startDate     String
  startingTime  String
  expiryTime    String
  period        Periodic    @default(Once)
  activity      Activity    @default(Class)
  note          String?
  status        BookStatus   @default(Approve)
  noOfPeople    Int          @default(1)
  user          User         @relation(fields: [userId], references: [id])
  userId        String
  room          Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId        String
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")  
  @@map("booking")

}

enum Status{
  Available
  Unavailable
  Occupied
}

enum BookStatus{
  Approve
  TBC
}

enum Activity{
  Class
  Tutorial
  Club
}

enum Periodic{
  Once
  Weekly
}